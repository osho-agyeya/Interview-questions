package interviewbit;

public class Arrange_II {
	
	
	public int arrange(int start, int stables, String horses, int K, int [][] table) {
        int N = horses.length();
        if(start >= N) {
            if(stables == K) 
                return 0;
            else // reach the end but did not allocate all stables
                return Integer.MAX_VALUE; //no solution, 
        } else {
            if(stables == K) {
                // have not finish allocating all the horses...
                return Integer.MAX_VALUE;
            }
            if(table[start][stables] != -1)
                return table[start][stables];
        }
        
        int W=0;
        int B=0;
        int min=Integer.MAX_VALUE;
        for(int i=start; i<N; i++) {
            if(horses.charAt(i)=='W')
                W++;
            else
                B++;
            if(W*B > min) break;
            
            int result = arrange(i+1, stables+1, horses, K, table);
            if(result != Integer.MAX_VALUE)
                min = Math.min(min, result+(W*B));
            table[start][stables] = min;
        }
        return min;
    }
    
    public int arrange(String horses, int K) {
        int N = horses.length();
        int [][] table = new int[N][K];
        for(int n=0;n<N;n++) {
            for(int k=0;k<K;k++) {
                table[n][k] = -1;
            }
        }
        int tmp = arrange(0, 0, horses, K, table);
        return tmp == Integer.MAX_VALUE ? -1 : tmp;
    }

}
