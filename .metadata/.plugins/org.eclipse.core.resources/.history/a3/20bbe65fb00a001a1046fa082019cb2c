package interviewbit;

import java.util.Arrays;
import java.util.PriorityQueue;

public class N_max_pair_combinations {
	
	class Node implements Comparable<Node>{
	    
	    int val;
	    int ai;
	    int bi;
	    
	    public Node(int val, int ai, int bi){
	        this.val = val;
	        this.ai=ai;
	        this.bi=bi;
	    }
	    
	    public int compareTo(Node other) {
	        return Integer.compare(other.val, this.val);
	    }

	}
	
	public int[] solve(int[] A, int[] B) {
        //Arrays.sort(A);
        Arrays.sort(B);
        int[] X = new int[A.length];
        PriorityQueue<Node> pq = new PriorityQueue<>();
        int bmax = B.length-1;
        for(int i =0; i<B.length; i++){
            pq.offer(new Node(A[i]+B[bmax], i,bmax));
        }
        for (int i=0; i<X.length; i++){
            Node n = pq.poll();
            X[i] = n.val;
            if (n.bi-1 >=0)pq.offer(new Node(A[n.ai]+B[n.bi-1],n.ai,n.bi-1));
        }
        return X;
    }
}


