package ctci;

public class Circus_Tower {
	
	public static int highestTower(List<Pair<Integer>> data) {
		 
	    class HeightComparator implements Comparator<Pair<Integer>> {
	        private int which;
	 
	        public HeightComparator(int which) {
	            this.which = which;
	        }
	 
	        @Override
	        public int compare(Pair<Integer> p1, Pair<Integer> p2) {
	            if (which == 0) {
	                if (!p1.getX().equals(p2.getX()))
	                    return p1.getX() - p2.getX();
	                else {
	                    return p1.getY() - p2.getY();
	                }
	            } else {
	                if (!p1.getY().equals(p2.getY()))
	                    return p1.getY() - p2.getY();
	                else {
	                    return p1.getX() - p2.getX();
	                }
	            }
	        }
	    }
	 
	    List<Pair<Integer>> copy = new ArrayList<Pair<Integer>>();
	    copy.addAll(data);
	    Collections.sort(data, new HeightComparator(0));
	    Collections.sort(copy, new HeightComparator(1));
	    return LCSLength(data, copy);
	}
	 
	private static int LCSLength(List<Pair<Integer>> X, 
	        List<Pair<Integer>> Y) {
	    int[][] array = new int[X.size() + 1][Y.size() + 1];
	    for (int i = 0; i < X.size(); ++i)
	        array[i][0] = 0;
	    for (int j = 0; j < Y.size(); ++j)
	        array[0][j] = 0;
	    for (int i = 0; i < X.size(); ++i) {
	        for (int j = 0; j < Y.size(); ++j) {
	            if (X.get(i).equals(Y.get(j)))
	                array[i + 1][j + 1] = array[i][j] + 1;
	            else
	                array[i + 1][j + 1] = 
	                    Math.max(array[i + 1][j], array[i][j + 1]);
	        }
	    }
	    return array[X.size()][Y.size()];
	}

}
