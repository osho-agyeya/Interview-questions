//doe

//this is using kruskal's algorithm

package interviewbit;

import java.util.Arrays;
import java.util.Comparator;

public class Commutable_Islands {
	
	public int solve(int A, int[][] B) {
        
        Arrays.sort(B, new Comparator<int[]>(){
            public int compare(int[] arr1, int[] arr2){
                return arr1[2] - arr2[2];
            }
        });
        
        //for (int i = 0; i < B.length; i++){
        //    System.out.println(Arrays.toString(B[i]));
        //}
        
        int ans = 0;
        int count = 0;
        
        int[] parent = new int[A];
        int[] rank = new int[A];
        
        Arrays.fill(parent, -1);
        Arrays.fill(rank, 1);
        
        for (int i = 0; i < B.length; i++){
            if (count == A)
                break;
                
            int x = find(parent, B[i][0] - 1);
            int y = find(parent, B[i][1] - 1);
            
            if (x == y)
                continue;
                
            if (rank[x] < rank[y]){
                parent[x] = y;
            }else if(rank[x] > rank[y]){
                parent[y] = x;
            }else{
                parent[x] = y;
                rank[y]++;
            }
            
            ans += B[i][2];
            count++;
        }
        
        return ans;
    }
    
    int find(int[] parent, int v){
        if (parent[v] == -1){
            return v;
        }else{
            parent[v] = find(parent, parent[v]);
            return parent[v];
        }
    }

}
